<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	
	<node pkg="scan_to_cloud_converter" type="scan_to_cloud_converter_node" name="scan_to_pointcloud2" output="screen">
		<param name="max_range" value="100.0"/>
		<param name="min_range" value="0.3"/>
		<remap from="/scan" to="/scan" />
		<remap from="/cloud" to="/cloudpoint2" />
	</node>

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="20.0" />
		
		<!-- data source to integrate (PointCloud2) -->
		<!-- <remap from="cloud_in" to="/narrow_stereo/points_filtered2" /> -->
		<remap from="cloud_in" to="cloudpoint2" />
	
	</node>

	<node pkg="rviz" type="rviz" name="octomapping_rviz" args="-d $(find octomap_server)/rviz_cfg/octomapping.rviz" />
</launch>